#extension GL_ARB_shader_image_load_store : require



layout (binding = 0, rgba8) readonly uniform image2D input_image;
layout (binding = 1, r8) writeonly uniform image2D output_image;
layout (local_size_x = 256, local_size_y = 1, local_size_z=1) in;
void main(){
    int z = int(gl_GlobalInvocationID.x);
    vec4 val0=imageLoad(input_image, ivec2(4,z));
    
    
    
        
        float L;
        if(val0.w<0.5){
            L=1.0;
        }
        else{
                L=(1.0-val0.x)+val0.z;
                int i=0;
                for(i=0; i<4; ++i){
                    for(int dz=-1; dz<=1; ++dz){
                        vec4 val1=imageLoad(input_image, ivec2(i,clamp(z+dz,0,255)));
                        float L1=(1.0-val1.x)*(1.0-val1.y)*0.3+val1.z;
                        L+=L1*val0.y;
                    }
                }
                    i=4;
                    for(int dz=-1; dz<=1; dz+=2){
                        vec4 val1=imageLoad(input_image, ivec2(i,clamp(z+dz,0,255)));
                        float L1=(1.0-val1.x)*(1.0-val1.y)*0.3+val1.z;
                        L+=(L1)*val0.y;
                    }
                for(int i=5; i<9; ++i){
                
                    for(int dz=-1; dz<=1; ++dz){
                        vec4 val1=imageLoad(input_image, ivec2(i,clamp(z+dz,0,255)));
                        float L1=(1.0-val1.x)*(1.0-val1.y)*0.3+val1.z;
                        L+=(L1)*val0.y;
                    }
                }
            }       
            L=min(L,1.0);
            imageStore(output_image,ivec2(0,z),vec4(L,L,L,L));
}
    
